#!/usr/bin/env node

require('shelljs/global');
require('colors');
var program = require('commander');
var util = require('../lib/util');
var fs = require('fs');

program.version(getVersion());

// Get version of apostrophe-cli and apostrophe.
function getVersion() {
  var pkginfo = require('pkginfo')(module, 'version');
  var cwd = process.cwd();

  var output = 'apostrophe-cli: ' + module.exports.version;
  var aposPath = cwd + '/node_modules/apostrophe/';

  // Append message for apostrophe.
  if (fs.existsSync(aposPath)) {
    var package = require(aposPath + 'package.json');

    output += 'apostrophe v' + package.version + ' is installed in this project.';
  } else {
    var request = require('request');

    request.get('https://raw.githubusercontent.com/apostrophecms/apostrophe-boilerplate/master/package.json', function (error, response, body) {
      if (!error && response.statusCode == 200) {
        var packageJSON = JSON.parse(body);

        output += 'apostrophe v' + packageJSON.version + ' will be installed with a new project, according to the dependencies of apostrophe-boilerplate.';
      } else {
        var execSync = require('child_process').execSync;
        var aposVersion = execSync('npm view apostrophe version').toString();

        output += 'apostrophe v' + aposVersion.trim() + ' (latest) will be installed with a new project, unless the boilerplate project\'s dependencies specify otherwise.';
      }
    });
  }

  return output;
}

util.checkDependencies();

var createCmd   = require('../lib/commands/create')(program);
var createWidgetCmd = require('../lib/commands/create-widget')(program);
var createPieceCmd = require('../lib/commands/create-piece')(program);
var createModuleCmd = require('../lib/commands/create-module')(program);
var aposCmd     = require('../lib/apostrophe')(program);

program.on('--help', function() {
  aposCmd.help();
});

program.parse(process.argv);

if (process.argv.length <= 2) {
  // This means user passed no args, so display help
  // Needs to come after parse, or command name won't register in help text
  program.help();
}
